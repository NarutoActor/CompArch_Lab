Lucas Rivera
Computer Archeture Lab 6

Table didnt transfer very well to .txt format
Assignment 1:
Instruction	RegDst	ALUSrc	MemtoReg	RegWrite	MemRead	MemWrite	Branch	ALUOp [1:0]
subu $sp, $sp, 24	1	0	0	1	0	0	0	10
sw $ra, 16($sp)	1	0	1	1	1	0	0	00
li $a0, 18	1	1	0	1	0	0	0	10
jal tak	10	0	10	1	0	0	1	01
Figure 1 does not contain/support Jump and Link (JAL)
Assignment 2:
1)	The values of $t1, $t2, $t3, $t4, and $t5 are 3, 17, 7, 20, and 13, respectively.

2)	The first and second divide instructions lead to hazards. Both instructions execute 2 cycles too early since they need to wait until the operating values have been written back by the previous instruction. This can be fixed by using the NOP command and waiting for two instructions. This gives a total of 9+4=13 cycles, as opposed to the original 25 cycles. There is also a hazard at the final add instruction (only if instruction forwarding is not supported), but this hazard is avoided by the two NOP instructions in the second divide instruction. 

Pipelining greatly increases the seed of a program and how many machine cycles are consumed Note that if instruction forwarding were supported, we could eliminate 2 stalls and only need 11 cycles total to execute the program. The results of a proper execution would yield: $t1 = 11, $t2 = 42, $t3 = 9, $t4 = 20, and $t5 = 13


Assignment 3:
# Lucas Rivera
# 
# pa3.asm
# This asm program solvs the roots of a quaderatic equation
# Inputs : The coefficients a,b,c of the equation a*x^2 + b*x + c = 0
# Output : The two integer solutions. (the roots)
#
# All numbers are 32 bit integers

# Reordered of four of the instructions to avoid 8 stalls. Lead to reduction of about -8%

main:	# Read all inputs and put them in floating point registers.
		li	     $v0, 4    # Load print_string syscall code to register v0 for the 1st string.
		la	     $a0, str1 # Load actual string to register $a0
		syscall			   # Make the syscall
		li	     $v0, 5	   # Load read_int syscall code to register v0 
#for the coefficient a of a quadratic polynomial
		syscall            
		move     $t1, $v0  # Move input from register $v0 to register $t1
		li	     $v0, 4	   # Load print_string syscall code
# to register v0 for the 2nd string.
		la	     $a0, str2 # Load actual string to register $a0
		syscall			
		li	     $v0, 5	   # Load read_int syscall code
# to register v0 for the coefficient a of a quadratic polynomial
		syscall			
		move     $t2, $v0  # Move input from register $v0 to register $t2

		mul		$t4,$t2,$t2  # t4 = t2*t2, where t2 holds b <- calculate here to optimize

		li	     $v0, 4	   # Load print_string syscall code to register v0 for the 3rd string.
		la	     $a0, str3 # Load actual string to register $a0
		syscall			
		li	     $v0, 5	   # Load read_int syscall code
# to register v0 for the coefficient a of a quadratic polynomial
		syscall            
		move     $t3, $v0	  # Move input from register 
#$v0 to register $t3 (move is a command built off of other commands in MIPS- it is not a native command
		
			
				# calculate the discriminant of the quadratic equation.
				# D = b^2 - 4*a*c

		mul		$t5,$t1,$t3	 # t5 = t1*t3, where t1 holds
# a and t3 holds c <- moved instruction here to optimize
		li		$t0, 2       # Load constant number to integer register
		mul		$t5,$t5,4    # Multiply value of s0 with 4, creating 4*a*c
		sub		$t6,$t4,$t5  # Calculate D = b^2-4*a*c
		tlt		$t6,$0		 # If D is less than 0 issue an exception
		
		# The following lines calculate the Integer result of the square root
		# of  a positive integer number D with a recursive algorithm.
		# x[n+1] = x[n] -(1+2*n), where n is the integer square root of an integer
		# number. x[0], of the step before the loop is D. The algorithm stops
		# when x[n+1] is less than zero.



		li		$s0, 0		 # Square Root Partial Result, sqrt(D).
		li      $t7, 1      			 # Decrement step.
		move    $s1,$t6   	   # Move value in register t6 to register s1 for safety purposes.
		sqrt: 
		sub	 $s1,$s1,$t7	 # Subtract the decrement step from the x[n]
		addi	$s0,$s0,1	 # Increase partial result
		addi	$t7,$t7,2	 # Increase by 2 the decrement step
		bltz $s1,endsqrt		 # Check if x[n+1] is less than zero, if yes stop <- moved instruction here to optimize

		b sqrt				 # Branch unconditionally to sqrt label
		endsqrt:
		neg		$s2,$t2		# Calculate -b and save it to s2
		mul		$s5,$t1,$t0  	# Calculate 2*a and save it to s5 <- moved here to optimize
		add		$s3,$s2,$s0  	# Calculate -b+sqrt(D) and save it to s3 
		sub		$s4,$s2,$s0  	# Calculate -b-sqrt(D) and save it to s4  
		div		$s6,$s3,$s5  	# Calculate first integer solution
		div		$s7,$s4,$s5  	# Calculate second integer solution
		
					
		li	$v0,4		    # Load print_string syscall 
#code to register v0 for the 1st result string.
		la  $a0, str4	    	# Load actual string to register $a0
		syscall			    # Make the syscall
		li	$v0, 1		    # Load print_int syscall code to register v0 for the 1st result string.
		move	$a0, $s6 	# Load actual integer to register $a0
		syscall			    # Make the syscall
		
		li	$v0,4		    # Load print_string syscall code to register v0 for the 1st result string.
		la  $a0, str5	    # Load actual string to register $a0
		syscall			    # Make the syscall
		li	$v0, 1		    # Load print_float syscall code to register v0 for the 1st result string.
		move	$a0, $s7 	# Load actual float to register $f12
		syscall			    # Make the syscall
		li	$v0, 10		    # Load exit syscall code to register v0.
		syscall			    # Make the syscall
		
		
.data
str1 : .asciiz "\nEnter A: "
str2 : .asciiz "\nEnter B: "
str3 : .asciiz "\nEnter C: "
str4 : .asciiz "\n f(x1) = 0, x1= "
str5 : .asciiz "\n f(x2) = 0, x2="

# If instruction forwarding was supported, the execution would become even faster in that we could      # avoid an additional for NOP commands/stalls and increase the optimization. This is due to many instructions requiring
 # A stall ONLY because they need to wait an additional clock cycle for the
 #previous instruction to “Write  Back.”









Assignment 4:
Cause: 10000000000
Status: 110000000000001111111100010011
Cause states: Coprocessor Unimplemented
Status states:
 Interrupt enable = true,
 Exception level = true,
 user mode =true, 
the Interrupt mask = 11111111 indicating that an interrupt is allowed at all 6 hardware and 2 software interrupt levels.

Assignment 5
# qaud_sol.s
# This assembly program calculates the integer solutions of a quadratic polynomial.
# Inputs : The coefficients a,b,c of the equation a*x^2 + b*x + c = 0
# Output : The two integer solutions.
#
# All numbers are 32 bit integers


	.globl main
main:	# Read all inputs and put them in floating point registers.

		li	     $v0, 4    # Load print_string syscall code to register v0 for the 1st string.
		la	     $a0, str1 # Load actual string to register $a0
		syscall			   # Make the syscall
		li	     $v0, 5	   # Load read_int syscall code to register v0 for the coefficient a of a quadratic polynomial
		syscall            # Make the syscall
		move     $t1, $v0  # Move input from register $v0 to register $t1
		beqz     $t1, zero # if a=0 then go to zero
		li	     $v0, 4	   # Load print_string syscall code to register v0 for the 2nd string.
		la	     $a0, str2 # Load actual string to register $a0
		syscall			   # Make the syscall
		li	     $v0, 5	   # Load read_int syscall code to register v0 for the coefficient a of a quadratic polynomial
		syscall			   # Make the syscall
		move     $t2, $v0  # Move input from register $v0 to register $t2
		li	     $v0, 4	   # Load print_string syscall code to register v0 for the 3rd string.
		la	     $a0, str3 # Load actual string to register $a0
		syscall			   # Make the syscall
		li	     $v0, 5	   # Load read_int syscall code to register v0 for the coefficient a of a quadratic polynomial
		syscall            # Make the syscall
		move     $t3, $v0  # Move input from register $v0 to register $t3
		
		# In the following lines all the necessary steps are taken to
		# calculate the discriminant of the quadratic equation.
		# As is known D = b^2 - 4*a*c
		
		mul		$t5,$t1,$t3	 # t5 = t1*t3, where t1 holds a and t3 holds c
		li		$t0, 2       # Load constant number to integer register
		mul		$t4,$t2,$t2  # t4 = t2*t2, where t2 holds b 
		mul		$t5,$t5,4    # Multiply value of s0 with 4, creating 4*a*c
		sub		$t6,$t4,$t5  # Calculate D = b^2-4*a*c
		bgez	$t6, sqrt	 # If D is greater than or equal to 0 break to negative
		li	    $v0, 4    	 
		la	    $a0, str6 	 # print the 6th string
		syscall		
		li	$v0, 10		     # terminate the program
		syscall	

		zero:
		li	    $v0, 4    	 
		la	    $a0, str7 	 # print the 7th string
		syscall		
		li	$v0, 10		     # terminate the program
		syscall	
		
		
		# The following lines calculate the Integer result of the square root
		# of  a positive integer number D with a recursive algorithm.
		# x[n+1] = x[n] -(1+2*n), where n is the integer square root of an integer
		# number. x[0], of the step before the loop is D. The algorithm stops
		# when x[n+1] is less than zero.
		
		sqrt:
		li      $t7, 1       # Decrement step.
		move    $s1,$t6      # Move value in register t6 to register s1 for safety purposes.
		li		$s0, 0		 # Square Root Partial Result, sqrt(D)
		sqrtloop: 
		sub	 $s1,$s1,$t7	 # Subtract the decrement step from the x[n]
		bltz $s1,endsqrt	 # Check if x[n+1] is less than zero, if yes stop
		addi	$t7,$t7,2	 # Increase by 2 the decrement step
		addi	$s0,$s0,1	 # Increase partial result
		b sqrtloop			 # Branch unconditionally to sqrtloop label
		
		noninteger:
		li	    $v0, 4    	 
		la	    $a0, str8 	 # print the 8th string
		syscall		
		li	$v0, 10		     # terminate the program
		syscall	
		
		endsqrt:
		neg		$s2,$t2		 # Calculate -b and save it to s2
		mul		$s5,$t1,$t0  # Calculate 2*a and save it to s5
		add		$s3,$s2,$s0  # Calculate -b+sqrt(D) and save it to s3 
		sub		$s4,$s2,$s0  # Calculate -b-sqrt(D) and save it to s4 
		div		$s6,$s3,$s5  # Calculate first integer solution
		mfhi    $t8
		bnez    $t8, noninteger #go to noninteger if the decimal is not .0
		div		$s7,$s4,$s5  # Calculate second integer solution
		mfhi    $t9
		bnez    $t9, noninteger #go to noninteger if the decimal is not .0
		
		#Print the calculated solutions.
		
		li	$v0,4		    # Load print_string syscall code to register v0 for the 1st result string.
		la  $a0, str4	    # Load actual string to register $a0
		syscall			    # Make the syscall
		li	$v0, 1		    # Load print_int syscall code to register v0 for the 1st result string.
		move	$a0, $s6 	# Load actual integer to register $a0
		syscall			    # Make the syscall
		
		li	$v0,4		    # Load print_string syscall code to register v0 for the 1st result string.
		la  $a0, str5	    # Load actual string to register $a0
		syscall			    # Make the syscall
		li	$v0, 1		    # Load print_float syscall code to register v0 for the 1st result string.
		move	$a0, $s7 	# Load actual float to register $f12
		syscall			    # Make the syscall
		li	$v0, 10		    # Load exit syscall code to register v0.
		syscall			    # Make the syscall
		
		
.data
str1 : .asciiz "Please enter coefficient a of equation a*x^2 + b*x + c: "
str2 : .asciiz "Please enter coefficient b of equation a*x^2 + b*x + c: "
str3 : .asciiz "Please enter coefficient c of equation a*x^2 + b*x + c: "
str4 : .asciiz "The first integer solution is: "
str5 : .asciiz "\nThe second integer solution is: "
str6 : .asciiz "\nError: your inputs cause the discriminant to be negative and your answer will have imaginary roots."
str7 : .asciiz "\nError: your equation is not quadratic, therefore you will not get two roots."
str8 : .asciiz "\nError: your roots are not integers."

